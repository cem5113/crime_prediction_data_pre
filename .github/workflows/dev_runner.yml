name: Manual Step Runner (with fallback) ‚Äî v2

on:
  workflow_dispatch:
    inputs:
      step:
        description: "Hangi adƒ±mƒ± √ßalƒ±≈ütƒ±rayƒ±m?"
        type: choice
        options:
          - full
          - update_crime
          - update_911
          - update_311
          - update_population
          - update_bus
          - update_train
          - update_poi
          - update_police_gov
          - update_neighbors      # NEW: neighbors.csv √ºret
          - make_crime_10         # NEW: sf_crime_10.csv √ºret (sf_crime + neighbors + 08)
          - update_weather        # sf_crime_11.csv i√ßin hava durumu
          - run_stacking          # NEW: stacking'i √ßalƒ±≈ütƒ±r (girdi: sf_crime_11.csv)
        default: full
      persist:
        description: "√áƒ±ktƒ±yƒ± nasƒ±l saklayalƒ±m?"
        type: choice
        options: [artifact, commit, none]
        default: artifact
      py:
        description: "Python s√ºr√ºm√º"
        type: choice
        options: ["3.11","3.10"]
        default: "3.11"

permissions:
  contents: write

concurrency:
  group: manual-step-${{ github.ref }}
  cancel-in-progress: true

env:
  CRIME_DATA_DIR: crime_prediction_data
  GEOID_LEN: "11"
  PYTHONUNBUFFERED: "1"
  SOCS_APP_TOKEN: ${{ secrets.SOCS_APP_TOKEN }}

jobs:
  run:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (with LFS)
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Ensure LFS objects
        run: |
          git lfs install
          git lfs pull
          echo "Repo k√∂k:"; ls -lah
          echo "crime_prediction_data:"; ls -lah crime_prediction_data || true

      # ---- En son BA≈ûARILI full pipeline artifact'ƒ±nƒ± indir (fallback i√ßin) ----
      - name: Restore last-good snapshot (from Full SF Crime Pipeline)
        id: lastgood
        uses: dawidd6/action-download-artifact@v3
        with:
          workflow: full_pipeline.yml
          workflow_conclusion: success
          name: sf-crime-pipeline-output
          path: last_good
        continue-on-error: true

      - name: Show last_good snapshot (if any)
        run: |
          if [ -d last_good ]; then
            echo "last_good/ i√ßeriƒüi:"
            ls -lah last_good || true
            echo "last_good/crime_prediction_data/ i√ßeriƒüi:"
            ls -lah last_good/crime_prediction_data || true
          else
            echo "last_good/ yok (daha √∂nce ba≈üarƒ±lƒ± full pipeline artifact bulunamadƒ±)."
          fi

      - name: Ensure data dir
        run: mkdir -p "${CRIME_DATA_DIR}"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ github.event.inputs.py }}
          cache: "pip"

      - name: Install minimal deps
        run: |
          set -Eeuo pipefail
          python -m pip install -U pip wheel setuptools
          pip install "pandas" "numpy" "requests" "holidays" "scipy" "scikit-learn" "joblib"
          pip install lightgbm xgboost || true

      - name: Install geo stack if needed (pinned)
        if: ${{ contains('full,update_bus,update_train,update_poi,update_police_gov,update_neighbors,make_crime_10', github.event.inputs.step) }}
        run: |
          set -Eeuo pipefail
          # Ana pipeline ile uyumlu s√ºr√ºmler
          pip install "geopandas==1.0.1" "shapely==2.0.4" "pyproj==3.6.1" "pyogrio==0.9.0" "rtree==1.3.0"

      - name: Sanity check inputs (√∂n-uyarƒ±)
        run: |
          echo "Se√ßili adƒ±m: ${{ github.event.inputs.step }}"
          echo "Mevcut dosyalar:"
          ls -lah
          echo "crime_prediction_data/"
          ls -lah crime_prediction_data || true

      - name: Run selected step (with resilient fallback)
        shell: bash
        run: |
          set -Eeuo pipefail
          trap 'echo "‚õî Hata olu≈ütu (satƒ±r: $LINENO). Loglarƒ± kontrol edin."' ERR

          # ------- yardƒ±mcƒ±lar -------
          copy_fallback_partial() {
            # last_good varsa, eksik/bo≈ü olan dosyalarƒ± tamamlama
            if [ -d last_good ]; then
              mkdir -p "${CRIME_DATA_DIR}"
              for f in $(find last_good -maxdepth 1 -type f \( -name "*.csv" -o -name "*.geojson" \) 2>/dev/null); do
                base="$(basename "$f")"
                dest="${CRIME_DATA_DIR}/${base}"
                if [ ! -s "${dest}" ]; then
                  cp -f "$f" "${dest}" && echo "‚Ü™Ô∏è Fallback kopyalandƒ±: ${base}"
                fi
              done
              if [ -d last_good/crime_prediction_data ]; then
                for f in $(find last_good/crime_prediction_data -maxdepth 1 -type f \( -name "*.csv" -o -name "*.geojson" \) 2>/dev/null); do
                  base="$(basename "$f")"
                  dest="${CRIME_DATA_DIR}/${base}"
                  if [ ! -s "${dest}" ]; then
                    cp -f "$f" "${dest}" && echo "‚Ü™Ô∏è Fallback kopyalandƒ±: ${base}"
                  fi
                done
              fi
            else
              echo "‚ÑπÔ∏è Fallback yok: last_good/ bulunamadƒ±."
            fi
          }

          ensure_script() {
            # var ise onu kullan; yoksa alternatiflerinden birini scripts/ altƒ±na aynen kopyala
            local main="$1"; shift
            local alts=("$@")
            if [ -f "$main" ]; then
              echo "$main"
              return 0
            fi
            for a in "${alts[@]}"; do
              if [ -f "$a" ]; then
                mkdir -p scripts
                cp -f "$a" "scripts/${main}"
                echo "üîÅ ${a} ‚Üí scripts/${main} olarak kopyalandƒ±."
                echo "scripts/${main}"
                return 0
              fi
            done
            echo ""
            return 1
          }

          run_or_fallback() {
            local label="$1"
            local cmd="$2"
            echo "‚ñ∂Ô∏è ${label} ba≈ülƒ±yor‚Ä¶"
            if bash -lc "$cmd"; then
              echo "‚úÖ ${label} tamam."
              return 0
            else
              echo "‚ö†Ô∏è ${label} FAILED. Fallback dosyalarƒ± kopyalanƒ±yor ve devam ediliyor‚Ä¶"
              copy_fallback_partial
              return 1
            fi
          }

          # ---- Tam akƒ±≈ü: sƒ±ralama revize edildi ----
          run_full() {
            run_or_fallback "01 update_crime"       "$( p=$(ensure_script 'update_crime.py' 'build_crime_grid.py' 'crime_grid_build.py'); test -n "$p" && echo "python -u $p" || echo "python -u update_crime.py" )" || true
            run_or_fallback "02 update_911"         "python -u $(ensure_script 'update_911.py' 'enrich_911.py' || echo 'update_911.py')" || true
            run_or_fallback "03 update_311"         "$( p=$(ensure_script 'update_311.py' 'scripts/update_311.py' 'enrich_311.py'); test -n "$p" && echo "python -u $p" || echo "python -u update_311.py" )" || true
            run_or_fallback "04 update_population"  "python -u $(ensure_script 'update_population.py' 'enrich_population.py' || echo 'update_population.py')" || true
            run_or_fallback "05 update_bus"         "python -u $(ensure_script 'update_bus.py' 'enrich_bus.py' || echo 'update_bus.py')" || true
            run_or_fallback "06 update_train"       "python -u $(ensure_script 'update_train.py' 'enrich_train.py' || echo 'update_train.py')" || true
            run_or_fallback "07 update_poi"         "$( p=$(ensure_script 'update_poi.py' 'pipeline_make_sf_crime_06.py' 'app_poi_to_06.py' 'enrich_poi.py'); test -n "$p" && echo "python -u $p" || echo "echo 'POI adƒ±mƒ± yok'; exit 2" )" || true
            run_or_fallback "08 update_police_gov"  "$( p=$(ensure_script 'update_police_gov.py' 'scripts/enrich_police_gov_06_to_07.py' 'enrich_police_gov.py' 'enrich_police.py'); test -n "$p" && echo 'python -u '"$p" || echo "echo 'Polis/Gov adƒ±mƒ± yok'; exit 2" )" || true
            run_or_fallback "09 update_neighbors"   "$( p=$(ensure_script 'update_neighbors.py' 'build_neighbors.py' 'neighbors_build.py' 'enrich_neighbors.py'); test -n "$p" && echo "python -u $p" || echo "python -u update_neighbors.py" )" || true
            run_or_fallback "10 make_crime_10"      "$( p=$(ensure_script 'make_sf_crime_10.py' 'build_sf_crime_10.py' 'neighbors_to_10.py' 'combine_neighbors_to_10.py'); test -n "$p" && echo "python -u $p" || echo "python -u make_sf_crime_10.py" )" || true
            run_or_fallback "11 update_weather"     "$( p=$(ensure_script 'update_weather.py' 'scripts/update_weather.py' 'enrich_weather.py'); test -n "$p" && echo "python -u $p" || echo "python -u update_weather.py" )" || true
            run_or_fallback "12 run_stacking"       "$( p=$(ensure_script 'stacking_risk_pipeline.py' 'run_stacking.py'); test -n "$p" && echo "python -u $p" || echo "python -u stacking_risk_pipeline.py" )" || true
          }

          STEP="${{ github.event.inputs.step }}"
          case "$STEP" in
            full) run_full ;;
            update_crime)       run_or_fallback "update_crime"      "python -u $(ensure_script 'update_crime.py' 'build_crime_grid.py' 'crime_grid_build.py' || echo 'update_crime.py')" || true ;;
            update_911)         run_or_fallback "update_911"        "python -u $(ensure_script 'update_911.py' 'enrich_911.py' || echo 'update_911.py')" || true ;;
            update_311)         run_or_fallback "update_311"        "python -u $(ensure_script 'update_311.py' 'scripts/update_311.py' 'enrich_311.py' || echo 'update_311.py')" || true ;;
            update_population)  run_or_fallback "update_population" "python -u $(ensure_script 'update_population.py' 'enrich_population.py' || echo 'update_population.py')" || true ;;
            update_bus)         run_or_fallback "update_bus"        "python -u $(ensure_script 'update_bus.py' 'enrich_bus.py' || echo 'update_bus.py')" || true ;;
            update_train)       run_or_fallback "update_train"      "python -u $(ensure_script 'update_train.py' 'enrich_train.py' || echo 'update_train.py')" || true ;;
            update_poi)         run_or_fallback "update_poi"        "$( p=$(ensure_script 'update_poi.py' 'pipeline_make_sf_crime_06.py' 'app_poi_to_06.py' 'enrich_poi.py'); test -n "$p" && echo "python -u $p" || echo "echo 'POI adƒ±mƒ± yok'; exit 2" )" || true ;;
            update_police_gov)  run_or_fallback "update_police_gov" "$( p=$(ensure_script 'update_police_gov.py' 'scripts/enrich_police_gov_06_to_07.py' 'enrich_police_gov.py' 'enrich_police.py'); test -n "$p" && echo "python -u $p" || echo "echo 'Polis/Gov adƒ±mƒ± yok'; exit 2" )" || true ;;
            update_neighbors)   run_or_fallback "update_neighbors"  "$( p=$(ensure_script 'update_neighbors.py' 'build_neighbors.py' 'neighbors_build.py' 'enrich_neighbors.py'); test -n "$p" && echo "python -u $p" || echo "python -u update_neighbors.py" )" || true ;;
            make_crime_10)      run_or_fallback "make_crime_10"     "$( p=$(ensure_script 'make_sf_crime_10.py' 'build_sf_crime_10.py' 'neighbors_to_10.py' 'combine_neighbors_to_10.py'); test -n "$p" && echo "python -u $p" || echo "python -u make_sf_crime_10.py" )" || true ;;
            update_weather)     run_or_fallback "update_weather"    "python -u $(ensure_script 'update_weather.py' 'scripts/update_weather.py' 'enrich_weather.py' || echo 'update_weather.py')" || true ;;
            run_stacking)       run_or_fallback "run_stacking"      "$( p=$(ensure_script 'stacking_risk_pipeline.py' 'run_stacking.py'); test -n "$p" && echo "python -u $p" || echo "python -u stacking_risk_pipeline.py" )" || true ;;
            *) echo "Bilinmeyen step: $STEP"; exit 2 ;;
          esac

      - name: Quick preview (ilk satƒ±rlar)
        run: |
          echo "sf_crime_10.csv (varsa) ‚Äì ilk 5 satƒ±r"; head -n 5 "${CRIME_DATA_DIR}/sf_crime_10.csv" || true
          echo "sf_crime_11.csv (varsa) ‚Äì ilk 5 satƒ±r"; head -n 5 "${CRIME_DATA_DIR}/sf_crime_11.csv" || true
          echo "neighbors.csv (varsa) ‚Äì ilk 5 satƒ±r"; head -n 5 "${CRIME_DATA_DIR}/neighbors.csv" || true

      - name: Pack outputs
        run: |
          set -Eeuo pipefail
          mkdir -p out
          cp -f ${CRIME_DATA_DIR}/*.csv out/ 2>/dev/null || true
          cp -f ${CRIME_DATA_DIR}/*.geojson out/ 2>/dev/null || true
          # √áalƒ±≈üma k√∂k√ºndeki CSV‚Äôler de eklensin (bazƒ± scriptler oraya yazƒ±yor olabilir)
          cp -f ./*.csv out/ 2>/dev/null || true
          ls -lah out || true

      - name: Write run summary
        if: always()
        run: |
          {
            echo "## Manual Step Runner (with fallback) ‚Äî v2"
            echo ""
            echo "- Step: **${{ github.event.inputs.step }}**"
            echo "- Python: **${{ github.event.inputs.py }}**"
            echo "- Tarih/Saat: **$(date)**"
            echo "- CRIME_DATA_DIR i√ßeriƒüi (ilk 20):"
            ls -lah "${CRIME_DATA_DIR}" | head -n 20 || true
          } >> $GITHUB_STEP_SUMMARY

      - name: Upload artifact (default)
        if: ${{ github.event.inputs.persist == 'artifact' }}
        uses: actions/upload-artifact@v4
        with:
          name: dev-run-${{ github.run_id }}
          path: out
          retention-days: 7
          if-no-files-found: warn

      - name: Commit & push (isteƒüe baƒülƒ±)
        if: ${{ github.event.inputs.persist == 'commit' }}
        run: |
          set -Eeuo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A
          git commit -m "üß™ Dev run v2 (with fallback): ${{ github.event.inputs.step }} (#${{ github.run_id }}) [skip ci]" || echo "No changes"
          git push || echo "Nothing to push"
