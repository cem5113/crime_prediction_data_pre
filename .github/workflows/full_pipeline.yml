# .github/workflows/full_pipeline.yml
name: Full SF Crime Pipeline

on:
  schedule:
    - cron: "0 14,15 * * *" # SF 07:00: 14:00 UTC (yaz), 15:00 UTC (kış)
  workflow_dispatch:
    inputs:
      persist:
        description: "Sonuçları nasıl saklayalım?"
        type: choice
        options: [artifact, commit, none]
        default: artifact
      force:
        description: "Manuel tetiklemede 07:00 kapısını YOK SAY"
        type: boolean
        default: true
      top_k:
        description: "Stacking: her saat dilimi için önerilecek GEOID sayısı"
        default: "50"

permissions:
  actions: read
  contents: write

concurrency:
  group: full-pipeline-${{ github.ref }}
  cancel-in-progress: true

env:
  CRIME_DATA_DIR: crime_prediction_data

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (with LFS)
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Ensure LFS objects
        run: |
          git lfs install
          git lfs pull
          echo "Repo root:"; ls -lah
          echo "crime_prediction_data:"; ls -lah crime_prediction_data || true
          echo "CRIME_DATA_DIR:"; ls -lah "${CRIME_DATA_DIR}" || true

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install deps
        run: |
          python -m pip install -U pip
          pip install pandas pyarrow

      # (İsteğe bağlı) Burada update scriptlerinizi çalıştırıyorsanız ekleyin
      # - name: Run update pipeline
      #   env:
      #     CRIME_DATA_DIR: ${{ env.CRIME_DATA_DIR }}
      #     TOP_K: ${{ github.event.inputs.top_k }}
      #   run: |
      #     python scripts/update_crime.py
      #     python scripts/generate_sf_crime_52.py
      #     python scripts/generate_sf_crime_54.py

      - name: Quick sanity read (sf_crime.csv)
        env:
          CRIME_DATA_DIR: ${{ env.CRIME_DATA_DIR }}
        run: |
          set -euo pipefail
          python - <<'PY'
          import os, sys, pandas as pd, pathlib
          base = pathlib.Path(os.environ.get("CRIME_DATA_DIR","crime_prediction_data"))
          cands = [base/"sf_crime.csv", pathlib.Path("sf_crime.csv")]
          p = next((c for c in cands if c.exists()), None)
          if not p:
            print("ℹ️ sf_crime.csv bulunamadı, sadece var olan dosyalar artifact'e eklenecek.", file=sys.stderr)
          else:
            df = pd.read_csv(p, nrows=5)
            print(f"✅ Okundu: {p} | örnek satırlar={len(df)}")
            print(df.head().to_string(index=False))
          PY

      - name: Ensure Parquet for y & 54 (root and CRIME_DATA_DIR)
        env:
          CRIME_DATA_DIR: ${{ env.CRIME_DATA_DIR }}
        run: |
          set -euo pipefail
          python - <<'PY'
          import os, pathlib, pandas as pd
          base = pathlib.Path(os.environ.get("CRIME_DATA_DIR","crime_prediction_data"))
          targets = [
            pathlib.Path("sf_crime_y.csv"),
            pathlib.Path("sf_crime_54.csv"),
            base/"sf_crime_y.csv",
            base/"sf_crime_54.csv",
          ]
          for csv in targets:
            if csv.exists():
              pq = csv.with_suffix(".parquet")
              try:
                df = pd.read_csv(csv, low_memory=False)
                df.to_parquet(pq, index=False)
                print(f"✅ Parquet: {pq}")
              except Exception as e:
                print(f"⚠️ Parquet üretilemedi: {csv} -> {e}")
          PY

      - name: Collect outputs for artifact
        env:
          CRIME_DATA_DIR: ${{ env.CRIME_DATA_DIR }}
        run: |
          set -euo pipefail
          mkdir -p _artifacts
          # Kök dizin
          for f in sf_crime.csv sf_crime_y.csv sf_crime_y.parquet sf_crime_54.csv sf_crime_54.parquet; do
            [ -f "$f" ] && cp -f "$f" _artifacts/ && echo "✔ root -> _artifacts/$f"
          done
          # CRIME_DATA_DIR altı
          for f in sf_crime.csv sf_crime_y.csv sf_crime_y.parquet sf_crime_54.csv sf_crime_54.parquet; do
            if [ -f "${CRIME_DATA_DIR}/$f" ]; then
              mkdir -p "_artifacts/${CRIME_DATA_DIR}"
              cp -f "${CRIME_DATA_DIR}/$f" "_artifacts/${CRIME_DATA_DIR}/"
              echo "✔ ${CRIME_DATA_DIR}/$f -> _artifacts/${CRIME_DATA_DIR}/$f"
            fi
          done

          echo "📦 İçerik:"
          ls -lah _artifacts || true

          # Hiçbir dosya toplanamadıysa fail verelim:
          if [ -z "$(find _artifacts -type f -maxdepth 2 2>/dev/null)" ]; then
            echo "❌ Yüklenecek dosya bulunamadı. Scriptler dosyaları üretiyor mu ve doğru klasöre yazıyor mu?"
            exit 3
          fi

      - name: Upload artifact (collected)
        if: ${{ github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && github.event.inputs.persist == 'artifact') }}
        uses: actions/upload-artifact@v4
        with:
          name: sf-crime-output
          path: _artifacts
          if-no-files-found: error
          retention-days: 14

