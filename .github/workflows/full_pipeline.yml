# .github/workflows/full_pipeline.yml
# .github/workflows/full_pipeline.yml
name: Full SF Crime Pipeline

on:
  schedule:
    - cron: "0 14,15 * * *" # SF 07:00: 14:00 UTC (yaz), 15:00 UTC (kış)
  workflow_dispatch:
    inputs:
      persist:
        description: "Sonuçları nasıl saklayalım?"
        type: choice
        options: [artifact, commit, none]
        default: artifact
      force:
        description: "Manuel tetiklemede 07:00 kapısını YOK SAY"
        type: boolean
        default: true
      top_k:
        description: "Stacking: her saat dilimi için önerilecek GEOID sayısı"
        default: "50"

permissions:
  actions: read
  contents: write

concurrency:
  group: full-pipeline-${{ github.ref }}
  cancel-in-progress: true

env:
  CRIME_DATA_DIR: crime_prediction_data

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (with LFS)
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Ensure LFS objects
        run: |
          git lfs install
          git lfs pull
          echo "Repo root:"; ls -lah
          echo "crime_prediction_data:"; ls -lah crime_prediction_data || true
          echo "CRIME_DATA_DIR:"; ls -lah "${CRIME_DATA_DIR}" || true

      - name: System deps for geopandas/rtree
        run: |
          sudo apt-get update
          sudo apt-get install -y libspatialindex-dev

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install Python deps
        run: |
          python -m pip install -U pip wheel setuptools
          pip install -U pandas numpy requests holidays pyarrow
          pip install -U "geopandas==1.0.1" "shapely==2.0.4" "pyproj==3.6.1" "pyogrio==0.9.0" "rtree==1.3.0"

      - name: Run update_crime.py (produce sf_crime.csv & grid)
        env:
          # === ÖNEMLİ: Y-only modu KAPALI ===
          CACHE_WRITE_Y_ONLY: "0"
          # Kaynak CSV (raw):
          CRIME_CSV_URL: "https://raw.githubusercontent.com/cem5113/crime_prediction_data_pre/main/sf_crime.csv"
          # Artifact araması için token (varsa): GH_PAT yoksa GitHub token kullan
          GH_TOKEN: ${{ secrets.GH_PAT || github.token }}
          GITHUB_REPO: "cem5113/crime_prediction_data_pre"
          GEOID_LEN: "11"
          # İsteğe bağlı hız/akış ayarları (gerekirse aç)
          SFCRIME_CHUNK_LIMIT: "50000"
          SFCRIME_MAX_RETRIES: "4"
          SFCRIME_SLEEP: "0.2"
          SFCRIME_BULK_RANGE: "1"
        run: |
          set -e
          python -u update_crime.py
          echo "---- Çıktılar (root) ----"; ls -lah | sed -n '1,200p'
          echo "---- Çıktılar (${CRIME_DATA_DIR}) ----"; ls -lah "${CRIME_DATA_DIR}" || true

      - name: Quick sanity read (sf_crime.csv)
        env:
          CRIME_DATA_DIR: ${{ env.CRIME_DATA_DIR }}
        run: |
          set -euo pipefail
          python - <<'PY'
          import os, pathlib, pandas as pd
          base = pathlib.Path(os.environ.get("CRIME_DATA_DIR","crime_prediction_data"))
          for p in [base/"sf_crime.csv", pathlib.Path("sf_crime.csv")]:
              if p.exists():
                  df = pd.read_csv(p, nrows=5)
                  print(f"✅ Okundu: {p} | örnek satırlar={len(df)}")
                  print(df.head().to_string(index=False))
                  break
          PY

      - name: Convert important CSVs → Parquet (root and CRIME_DATA_DIR)
        env:
          CRIME_DATA_DIR: ${{ env.CRIME_DATA_DIR }}
        run: |
          set -euo pipefail
          python - <<'PY'
          import os, pathlib, pandas as pd
          base = pathlib.Path(os.environ.get("CRIME_DATA_DIR","crime_prediction_data"))
          to_try = [
              pathlib.Path("sf_crime.csv"),
              pathlib.Path("sf_crime_y.csv"),
              pathlib.Path("sf_crime_grid_full_labeled.csv"),
              base/"sf_crime.csv",
              base/"sf_crime_y.csv",
              base/"sf_crime_grid_full_labeled.csv",
          ]
          for csv in to_try:
              if csv.exists():
                  pq = csv.with_suffix(".parquet")
                  try:
                      df = pd.read_csv(csv, low_memory=False)
                      df.to_parquet(pq, index=False)
                      print(f"✅ Parquet yazıldı: {pq}")
                  except Exception as e:
                      print(f"⚠️ Parquet üretilemedi: {csv} -> {e}")
          PY

      - name: Collect outputs for artifact
        env:
          CRIME_DATA_DIR: ${{ env.CRIME_DATA_DIR }}
        run: |
          set -euo pipefail
          mkdir -p _artifacts "${CRIME_DATA_DIR}"
          # Kök dizin
          for f in \
            sf_crime.csv sf_crime.parquet \
            sf_crime_y.csv sf_crime_y.parquet \
            sf_crime_grid_full_labeled.csv sf_crime_grid_full_labeled.parquet \
            ; do
            [ -f "$f" ] && cp -f "$f" _artifacts/ && echo "✔ root -> _artifacts/$f"
          done
          # CRIME_DATA_DIR altı
          for f in \
            sf_crime.csv sf_crime.parquet \
            sf_crime_y.csv sf_crime_y.parquet \
            sf_crime_grid_full_labeled.csv sf_crime_grid_full_labeled.parquet \
            ; do
            if [ -f "${CRIME_DATA_DIR}/$f" ]; then
              mkdir -p "_artifacts/${CRIME_DATA_DIR}"
              cp -f "${CRIME_DATA_DIR}/$f" "_artifacts/${CRIME_DATA_DIR}/"
              echo "✔ ${CRIME_DATA_DIR}/$f -> _artifacts/${CRIME_DATA_DIR}/$f"
            fi
          done
          echo "📦 İçerik:"
          find _artifacts -type f -maxdepth 3 -print | sed -n '1,200p'
          # En az bir dosya olsun
          if [ -z "$(find _artifacts -type f 2>/dev/null)" ]; then
            echo "❌ Yüklenecek dosya bulunamadı. update_crime.py çıktıları üretiyor mu?"
            exit 3
          fi

      - name: Upload artifact (collected)
        if: ${{ github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && github.event.inputs.persist == 'artifact') }}
        uses: actions/upload-artifact@v4
        with:
          name: sf-crime-output
          path: _artifacts
          if-no-files-found: error
          retention-days: 14

      - name: Commit & push (opsiyonel)
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.persist == 'commit' }}
        run: |
          set -e
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add -A
          git commit -m "🔄 update_crime.py outputs" || echo "No changes"
          git push || echo "Nothing to push"

