name: Full SF Crime Pipeline

on:
  # SF 07:00 ≈ 14:00 UTC
  schedule:
    - cron: "0 14 * * *"
  workflow_dispatch:
    inputs:
      persist:
        description: "Sonuçları nasıl saklayalım?"
        type: choice
        options: [artifact, none]
        default: artifact
      force:
        description: "Manuel tetiklemede 07:00 kapısını YOK SAY (bypass)"
        type: boolean
        default: true
      top_k:
        description: "En riskli GEOID sayısı (string/int girin)"
        required: false
        default: "50"

permissions:
  actions: read
  contents: read

concurrency:
  group: full-pipeline-${{ github.ref }}
  cancel-in-progress: true

env:
  CRIME_DATA_DIR: crime_prediction_data_pre
  ARTIFACT_NAME: sf-crime-pipeline-output
  TARGET_FILE: sf_crime_y.csv
  TOP_K: ${{ github.event.inputs.top_k }}

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (with LFS)
        uses: actions/checkout@v4
        with:
          lfs: true

      # --- SF saati ayarı ve 07:00 kapısı ---
      - name: Set runner timezone to America/Los_Angeles
        uses: szenius/set-timezone@v2.0
        with:
          timezoneLinux: "America/Los_Angeles"

      - name: Gate by local SF time == 07 (bypassable)
        id: gate
        shell: bash
        run: |
          set -euo pipefail
          now="$(date)"
          hour="$(date +%H)"
          echo "Runner local time: $now (hour=$hour)"
          echo "RUN_LOCAL_TIME=$now" >> "$GITHUB_ENV"

          # Manuel + force=true => kapıyı bypass
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.force }}" = "true" ]; then
            echo "proceed=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          if [ "$hour" = "07" ]; then
            echo "proceed=true" >> "$GITHUB_OUTPUT"
          else
            echo "proceed=false" >> "$GITHUB_OUTPUT"
          fi

      # --- Önceki başarılı run'dan sf_crime_y.csv'yi prefetch et (artifact) ---
      - name: Prefetch previous sf_crime_y.csv from artifact (if any)
        if: ${{ steps.gate.outputs.proceed == 'true' }}
        env:
          GH_TOKEN: ${{ github.token }}
          WORKFLOW_NAME: Full SF Crime Pipeline
          ARTIFACT_NAME: ${{ env.ARTIFACT_NAME }}
          OUT_DIR: ${{ env.CRIME_DATA_DIR }}
          TARGET_FILE: ${{ env.TARGET_FILE }}
        run: |
          set -euo pipefail
          mkdir -p "${OUT_DIR}"
          if [ -f "${OUT_DIR}/${TARGET_FILE}" ]; then
            echo "ℹ️ ${OUT_DIR}/${TARGET_FILE} zaten var, prefetch atlandı."
            exit 0
          fi
          sudo apt-get update -y >/dev/null
          sudo apt-get install -y unzip >/dev/null
          if ! command -v gh >/dev/null; then
            type -p curl >/dev/null && sudo curl -sSL https://raw.githubusercontent.com/cli/cli/trunk/script/install.sh | sh
          fi
          echo "🔎 Son 20 başarılı run içinde önceki ${TARGET_FILE} aranıyor..."
          RUNS=$(gh run list -R "${GITHUB_REPOSITORY}" --workflow "${WORKFLOW_NAME}" --status success -L 20 --json databaseId -q '.[].databaseId' || true)
          for RID in ${RUNS:-}; do
            echo "  • Run #$RID"
            rm -rf "_prev/$RID" && mkdir -p "_prev/$RID"
            if gh run download -R "${GITHUB_REPOSITORY}" "$RID" -n "${ARTIFACT_NAME}" -D "_prev/$RID" >/dev/null 2>&1; then
              F=$(find "_prev/$RID" -type f -iname "${TARGET_FILE}" | head -n1 || true)
              if [ -n "${F:-}" ]; then
                cp -f "$F" "${OUT_DIR}/${TARGET_FILE}"
                echo "✅ Prefetch OK: $F → ${OUT_DIR}/${TARGET_FILE}"
                break
              fi
            fi
          done
          ls -lah "${OUT_DIR}" || true

      # --- Python ortamı ---
      - name: Set up Python 3.11
        if: ${{ steps.gate.outputs.proceed == 'true' }}
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install Python deps
        if: ${{ steps.gate.outputs.proceed == 'true' }}
        run: |
          python -m pip install -U pip
          pip install pandas pyarrow python-dateutil pytz

      # --- Güncelle ve yaz (CSV + Parquet) ---
      - name: Run update_crime.py (incremental update)
        if: ${{ steps.gate.outputs.proceed == 'true' }}
        env:
          CRIME_DATA_DIR: ${{ env.CRIME_DATA_DIR }}
          TARGET_FILE: ${{ env.TARGET_FILE }}
          TOP_K: ${{ env.TOP_K }}
        run: |
          python scripts/update_crime.py

      # (Opsiyonel) CSV → Parquet toparlama, eğer script Parquet üretmiyorsa
      - name: Ensure Parquet exists
        if: ${{ steps.gate.outputs.proceed == 'true' }}
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -f "${{ env.CRIME_DATA_DIR }}/sf_crime_y.parquet" ] && [ -f "${{ env.CRIME_DATA_DIR }}/sf_crime_y.csv" ]; then
            python - <<'PY'
import pandas as pd, os
p=os.environ["CRIME_DATA_DIR"]
df=pd.read_csv(os.path.join(p,"sf_crime_y.csv"))
df.to_parquet(os.path.join(p,"sf_crime_y.parquet"), index=False)
print("Parquet created from CSV.")
PY
          fi

      # --- Sonuçları artifact olarak yükle (CSV + Parquet) ---
      - name: Upload artifact (sf_crime_y.{csv,parquet})
        if: ${{ steps.gate.outputs.proceed == 'true' && (github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && github.event.inputs.persist == 'artifact')) }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: |
            ${{ env.CRIME_DATA_DIR }}/sf_crime_y.csv
            ${{ env.CRIME_DATA_DIR }}/sf_crime_y.parquet
          if-no-files-found: error
          retention-days: 14
